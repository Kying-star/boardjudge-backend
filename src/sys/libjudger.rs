/* automatically generated by rust-bindgen 0.59.2 */

pub const VERSION: u32 = 131329;
pub const UNLIMITED: i32 = -1;
pub const ARGS_MAX_NUMBER: u32 = 256;
pub const ENV_MAX_NUMBER: u32 = 256;
pub const SUCCESS: ::std::os::raw::c_int = 0;
pub const INVALID_CONFIG: ::std::os::raw::c_int = -1;
pub const FORK_FAILED: ::std::os::raw::c_int = -2;
pub const PTHREAD_FAILED: ::std::os::raw::c_int = -3;
pub const WAIT_FAILED: ::std::os::raw::c_int = -4;
pub const ROOT_REQUIRED: ::std::os::raw::c_int = -5;
pub const LOAD_SECCOMP_FAILED: ::std::os::raw::c_int = -6;
pub const SETRLIMIT_FAILED: ::std::os::raw::c_int = -7;
pub const DUP2_FAILED: ::std::os::raw::c_int = -8;
pub const SETUID_FAILED: ::std::os::raw::c_int = -9;
pub const EXECVE_FAILED: ::std::os::raw::c_int = -10;
pub const SPJ_ERROR: ::std::os::raw::c_int = -11;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct config {
    pub max_cpu_time: ::std::os::raw::c_int,
    pub max_real_time: ::std::os::raw::c_int,
    pub max_memory: ::std::os::raw::c_long,
    pub max_stack: ::std::os::raw::c_long,
    pub max_process_number: ::std::os::raw::c_int,
    pub max_output_size: ::std::os::raw::c_long,
    pub memory_limit_check_only: ::std::os::raw::c_int,
    pub exe_path: *mut ::std::os::raw::c_char,
    pub input_path: *mut ::std::os::raw::c_char,
    pub output_path: *mut ::std::os::raw::c_char,
    pub error_path: *mut ::std::os::raw::c_char,
    pub args: [*mut ::std::os::raw::c_char; 256usize],
    pub env: [*mut ::std::os::raw::c_char; 256usize],
    pub log_path: *mut ::std::os::raw::c_char,
    pub seccomp_rule_name: *mut ::std::os::raw::c_char,
    pub uid: ::std::os::raw::c_uint,
    pub gid: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_config() {
    assert_eq!(
        ::std::mem::size_of::<config>(),
        4200usize,
        concat!("Size of: ", stringify!(config))
    );
    assert_eq!(
        ::std::mem::align_of::<config>(),
        8usize,
        concat!("Alignment of ", stringify!(config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).max_cpu_time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(max_cpu_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).max_real_time as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(max_real_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).max_memory as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(max_memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).max_stack as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(max_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).max_process_number as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(max_process_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).max_output_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(max_output_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).memory_limit_check_only as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(memory_limit_check_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).exe_path as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(exe_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).input_path as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(input_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).output_path as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(output_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).error_path as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(error_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).args as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).env as *const _ as usize },
        2128usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).log_path as *const _ as usize },
        4176usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(log_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).seccomp_rule_name as *const _ as usize },
        4184usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(seccomp_rule_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).uid as *const _ as usize },
        4192usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config>())).gid as *const _ as usize },
        4196usize,
        concat!(
            "Offset of field: ",
            stringify!(config),
            "::",
            stringify!(gid)
        )
    );
}
pub const WRONG_ANSWER: ::std::os::raw::c_int = -1;
pub const CPU_TIME_LIMIT_EXCEEDED: ::std::os::raw::c_int = 1;
pub const REAL_TIME_LIMIT_EXCEEDED: ::std::os::raw::c_int = 2;
pub const MEMORY_LIMIT_EXCEEDED: ::std::os::raw::c_int = 3;
pub const RUNTIME_ERROR: ::std::os::raw::c_int = 4;
pub const SYSTEM_ERROR: ::std::os::raw::c_int = 5;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct result {
    pub cpu_time: ::std::os::raw::c_int,
    pub real_time: ::std::os::raw::c_int,
    pub memory: ::std::os::raw::c_long,
    pub signal: ::std::os::raw::c_int,
    pub exit_code: ::std::os::raw::c_int,
    pub error: ::std::os::raw::c_int,
    pub result: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_result() {
    assert_eq!(
        ::std::mem::size_of::<result>(),
        32usize,
        concat!("Size of: ", stringify!(result))
    );
    assert_eq!(
        ::std::mem::align_of::<result>(),
        8usize,
        concat!("Alignment of ", stringify!(result))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<result>())).cpu_time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(result),
            "::",
            stringify!(cpu_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<result>())).real_time as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(result),
            "::",
            stringify!(real_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<result>())).memory as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(result),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<result>())).signal as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(result),
            "::",
            stringify!(signal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<result>())).exit_code as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(result),
            "::",
            stringify!(exit_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<result>())).error as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(result),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<result>())).result as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(result),
            "::",
            stringify!(result)
        )
    );
}
#[link(name = "judger")]
extern "C" {
    pub fn run(arg1: *mut config, arg2: *mut result);
}

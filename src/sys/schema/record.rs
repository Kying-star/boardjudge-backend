//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "record")]
pub struct Model {
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "Custom(\"uuid\".to_owned())"
    )]
    pub id: String,
    pub time: DateTime,
    #[sea_orm(column_type = "Custom(\"uuid\".to_owned())")]
    pub user_id: String,
    #[sea_orm(column_type = "Custom(\"uuid\".to_owned())")]
    pub problem_id: String,
    #[sea_orm(column_type = "Text")]
    pub code: String,
    pub language: String,
    #[sea_orm(column_type = "Custom(\"LONGTEXT\".to_owned())")]
    pub result: String,
    pub status: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::problem::Entity",
        from = "Column::ProblemId",
        to = "super::problem::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Problem,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    User,
}

impl Related<super::problem::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Problem.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
